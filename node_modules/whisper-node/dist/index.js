"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const shell_1 = __importDefault(require("./shell"));
const whisper_1 = require("./whisper");
var path = require('path');
const tsToArray_1 = __importDefault(require("./tsToArray"));
// returns array[]: {tsB, tsE, speech}
function whisper(filePath, whisperOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            console.log("[whisper-json] Running in", filePath);
            // create command
            const command = (0, whisper_1.createCppCommand)({
                filePath: path.normalize(filePath),
                model: "en_base",
                options: {
                    "word-timestamps": true,
                },
            });
            // todo: add return for continually updated progres value
            const transcript = yield (0, shell_1.default)(command, whisperOptions);
            const transcriptArray = (0, tsToArray_1.default)(transcript);
            return transcriptArray;
        }
        catch (error) {
            console.log("top level error: ", error);
        }
    });
}
exports.default = whisper;
//# sourceMappingURL=index.js.map